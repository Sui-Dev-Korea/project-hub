name: reviewer-bot

on:
  schedule:
    - cron: "2-59/5 * * * *"  # 2분, 7분, 12분, …, 57분 (정각 부하 회피)
  workflow_dispatch: {}

permissions:
  contents: write
  issues: write
  repository-projects: write

env:
  TZ: Asia/Seoul
  BOT_NAME: reviewer
  GH_TOKEN: ${{ secrets.BOT_TOKEN }}   # gh CLI용 PAT (org projects/graphQL 접근 포함)

jobs:
  assign-reviewers:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq
          curl -sSL https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Install GitHub CLI
        run: |
          set -euo pipefail
          if ! command -v gh >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y gh
          fi
          # gh CLI가 GH_TOKEN을 보고 인증하므로 환경변수 보장
          if [ -z "${GH_TOKEN:-}" ]; then
            export GH_TOKEN="${GITHUB_TOKEN}"
          fi

      - name: Find managed projects
        id: list
        run: |
          set -euo pipefail
          ls .github/config/${{ env.BOT_NAME }}/*.yml 2>/dev/null | sed 's#.*/##; s#\.yml$##' > projects.txt || true
          echo "count=$(wc -l < projects.txt | tr -d ' ')" >> $GITHUB_OUTPUT

      - name: No managed projects? (short-circuit)
        if: ${{ steps.list.outputs.count == '0' }}
        run: echo "No configs under .github/config/${{ env.BOT_NAME }} — nothing to do."

      - name: Loop over projects
        if: ${{ steps.list.outputs.count != '0' }}
        run: |
          set -euo pipefail

          while read -r KEY; do
            [ -z "$KEY" ] && continue
            echo "::group::Project = $KEY"

            PROJECT_ID=""

            CFG=".github/config/${{ env.BOT_NAME }}/${KEY}.yml"
            ST="state/${{ env.BOT_NAME }}/${KEY}.json"
            mkdir -p "state/${{ env.BOT_NAME }}"
            [ -f "$ST" ] || echo '{}' > "$ST"

            ORG=$(yq -r '.project_org // ""' "$CFG")
            NUM=$(yq -r '.project_number // ""' "$CFG")
            if [ -z "$PROJECT_ID" ] && [ -n "$ORG" ] && [ -n "$NUM" ]; then
              Q='query($org:String!,$num:Int!){organization(login:$org){projectV2(number:$num){id title}}}'
              PROJECT_ID=$(jq -nc --arg q "$Q" --arg org "$ORG" --argjson num "$NUM" \
                '{query:$q,variables:{org:$org,num:$num}}' | gh api graphql --input - \
                | jq -r '.data.organization.projectV2.id // empty')
            fi

            if [ -z "$PROJECT_ID" ]; then
              echo "[ERR] project_org/number 로 Project ID를 찾지 못했습니다. ORG=$ORG NUM=$NUM"
              exit 1
            fi

            REVIEWERS_NEEDED=$(yq -r '.reviewers_needed // 2' "$CFG")
            QUOTA=$(yq -r '.quota_per_sprint // 8' "$CFG")
            SPRINT=$(yq -r '.sprint // "default-sprint"' "$CFG")
            POOL=$(yq -r '(.eligible_pool // [])[]? // ""' "$CFG" | tr '\n' ' ')
            EXC=$(yq -r '(.exclude_rules // [])[]? // ""' "$CFG" | tr '\n' ' ')

            # ---- 프로젝트 스냅샷 (필드+아이템) ----
            READ_Q='query($pid:ID!){
              node(id:$pid){
                ... on ProjectV2{
                  fields(first:50){
                    nodes{
                      __typename
                      ... on ProjectV2Field { id name dataType }
                    }
                  }
                  items(first:100){
                    nodes{
                      id
                      content{
                        __typename
                        ... on Issue       { id number title url repository { nameWithOwner } }
                        ... on PullRequest { id number title url repository { nameWithOwner } }
                      }
                      fieldValues(first:50){
                        nodes{
                          __typename
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            field { ... on ProjectV2Field { id name } }
                            name
                          }
                          ... on ProjectV2ItemFieldTextValue {
                            field { ... on ProjectV2Field { id name } }
                            text
                          }
                          ... on ProjectV2ItemFieldUserValue {
                            field { ... on ProjectV2Field { id name } }
                            users(first:10){ nodes{ login } }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }'
            jq -nc --arg q "$READ_Q" --arg pid "$PROJECT_ID" \
              '{query:$q, variables:{pid:$pid}}' \
            | gh api graphql --input - > proj.json

            # ---- Status 옵션 조회 ----
            FQ='query($pid:ID!){
              node(id:$pid){
                ... on ProjectV2{
                  fields(first:50){
                    nodes{
                      __typename
                      ... on ProjectV2Field { id name dataType }
                      ... on ProjectV2SingleSelectField { id name options { name } }
                    }
                  }
                }
              }
            }'
            jq -nc --arg q "$FQ" --arg pid "$PROJECT_ID" \
              '{query:$q, variables:{pid:$pid}}' \
            | gh api graphql --input - > fields.json

            STATUS_OPTS_JSON=$(jq -c '
              [.data.node.fields.nodes[]
               | select((.name|test("(?i)^status\\s*$")) and .__typename=="ProjectV2SingleSelectField")
               | .options[].name]
            ' fields.json)

            RV_FIELD_ID=$(jq -r '.data.node.fields.nodes[] | select(.name=="Reviewers(auto)") | .id' proj.json)
            if [ -z "$RV_FIELD_ID" ] || [ "$RV_FIELD_ID" = "null" ]; then
              echo "WARN: Reviewers(auto) 필드가 없어 $KEY 스킵"
              echo "::endgroup::"
              continue
            fi

            # ---- state 초기 병합 & 스프린트 전환 처리 ----
            jq -s '.[0] * .[1]' <(echo '{"quota_usage":{},"processed_card_ids":[]}' ) "$ST" > _st.json || echo '{}' > _st.json
            mv _st.json "$ST"

            CUR=$(jq -r '.sprint // empty' "$ST")
            if [ "$CUR" != "$SPRINT" ]; then
              jq --arg s "$SPRINT" '
                .sprint = $s
                | .quota_per_sprint = '"$QUOTA"'
                | .quota_usage = {}
                | .processed_card_ids = []
              ' "$ST" > _st.json && mv _st.json "$ST"
            fi

            PROCESSED=$(jq -c '.processed_card_ids' "$ST")

            # ---- 대상 아이템 추출 (Status=Ready & Reviewers(auto) empty & 미처리) ----
            jq -r --argjson done "$PROCESSED" --argjson sopts "${STATUS_OPTS_JSON:-[]}" '
              .data.node.items.nodes[]
              | {id, content: .content, fields: .fieldValues.nodes}
              | select(.id as $id | ($done | index($id)) | not)
              | select(
                  (.fields
                    | map(select(.__typename=="ProjectV2ItemFieldSingleSelectValue"))
                    | map(.name // "")
                    | map(ascii_downcase)) as $vals
                  | ($vals | index("ready"))
                  and (
                    (.fields
                      | map(select(.__typename=="ProjectV2ItemFieldSingleSelectValue"))
                      | map(.name // "")) as $names
                    | any($names[]; ($sopts | index(.)))
                  )
                )
              | select((
                  [.fields[]
                  | select((.field.name? // "") | test("(?i)^reviewers\\(auto\\)\\s*$"))
                  | .text] | .[0]) == null or
                  (
                  [.fields[]
                    | select((.field.name? // "") | test("(?i)^reviewers\\(auto\\)\\s*$"))
                    | .text] | .[0]) == "")
              | @base64
            ' proj.json > items.b64

            if [ ! -s items.b64 ]; then
              echo "No Ready items without reviewers — $KEY"
              echo "::endgroup::"
              continue
            fi

            # ---- 아이템 처리 ----
            while read -r ROW; do
              J=$(echo "$ROW" | base64 -d)
              ITEM_ID=$(echo "$J" | jq -r '.id')
              ASSIGNEE=$(echo "$J" | jq -r '
                (.fields[] | select(.field.name=="Assignee")  | .users.nodes[0].login // empty),
                (.fields[] | select(.field.name=="Assignees") | .users.nodes[0].login // empty)
              ' | head -n1)
              CTYPE=$(echo "$J" | jq -r '.content.__typename // "DRAFT"')
              ISSUE_URL=$(echo "$J" | jq -r '.content.url // ""')
              REPO_NWO=$(echo "$J" | jq -r '.content.repository.nameWithOwner // ""')

              # 후보풀(제외/자기자신 제외) → 셔플 → 쿼터 필터 → 픽
              CAND=()
              for u in $POOL; do
                [ -z "$u" ] && continue
                echo " $EXC " | grep -qw " $u " && continue
                [ "$u" = "$ASSIGNEE" ] && continue
                CAND+=("$u")
              done
              SEL=()
              for u in $(printf "%s\n" "${CAND[@]}" | shuf); do
                USED=$(jq -r --arg u "$u" '.quota_usage[$u] // 0' "$ST")
                [ "$USED" -lt "$QUOTA" ] && SEL+=("$u")
              done
              PICKS=()
              for u in "${SEL[@]}"; do
                PICKS+=("$u")
                [ ${#PICKS[@]} -ge $REVIEWERS_NEEDED ] && break
              done
              COUNT=${#PICKS[@]}
              if [ $COUNT -eq 0 ]; then
                NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                MSG="❌ [AUTO][$NOW][$KEY] 리뷰어 배정 실패(쿼터/제외 충돌)"
                if [ "$CTYPE" = "Issue" ] || [ "$CTYPE" = "PullRequest" ]; then
                  gh api repos/$REPO_NWO/issues/$(basename "$ISSUE_URL")/comments -f body="$MSG" >/dev/null || true
                fi
                continue
              fi

              if [ $COUNT -eq 1 ]; then
                REV="@${PICKS[0]}"
              else
                REV="@${PICKS[0]}, @${PICKS[1]}"
              fi

              M='mutation($pid:ID!,$item:ID!,$fid:ID!,$text:String!){
                updateProjectV2ItemFieldValue(input:{projectId:$pid,itemId:$item,fieldId:$fid,value:{text:$text}}){
                  clientMutationId
                }}'
              for vname in PROJECT_ID ITEM_ID RV_FIELD_ID; do
                eval "v=\${$vname}"
                if [ -z "$v" ]; then
                  echo "FATAL: $vname is empty" >&2
                  exit 1
                fi
              done
              jq -nc \
                --arg q "$M" \
                --arg pid  "$PROJECT_ID" \
                --arg item "$ITEM_ID" \
                --arg fid  "$RV_FIELD_ID" \
                --arg text "$REV" \
                '{query:$q, variables:{pid:$pid, item:$item, fid:$fid, text:$text}}' \
              | gh api graphql --input - >/dev/null

              NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
              MSG="✅ [AUTO][$NOW][$KEY] 리뷰어 자동 배정: $REV · 스프린트: $SPRINT · 쿼터: $QUOTA/인"
              if [ "$CTYPE" = "Issue" ] || [ "$CTYPE" = "PullRequest" ]; then
                gh api repos/$REPO_NWO/issues/$(basename "$ISSUE_URL")/comments -f body="$MSG" >/dev/null || true
              fi

              # state 업데이트
              if [ $COUNT -ge 1 ]; then
                P0="${PICKS[0]}"
                jq --arg u "$P0" '.quota_usage[$u] = ((.quota_usage[$u] // 0) + 1)' "$ST" > _st.json && mv _st.json "$ST"
              fi
              if [ $COUNT -ge 2 ]; then
                P1="${PICKS[1]}"
                jq --arg u "$P1" '.quota_usage[$u] = ((.quota_usage[$u] // 0) + 1)' "$ST" > _st.json && mv _st.json "$ST"
              fi
              jq --arg id "$ITEM_ID" --arg s "$SPRINT" --argjson q "$QUOTA" '
                .processed_card_ids |= ( . + [$id] | unique )
                | .last_run_at = "'$NOW'"
                | .sprint = $s
                | .quota_per_sprint = $q
              ' "$ST" > _st.json && mv _st.json "$ST"

            done < items.b64

            # ---- 커밋 & 푸시 (untracked 포함, PAT 사용) ----
            git config --global safe.directory "$GITHUB_WORKSPACE"
            git config user.name  "project-hub-bot"
            git config user.email "bot@users.noreply.github.com"

            # state 디렉토리 최초 트래킹
            if ! git ls-files --error-unmatch state >/dev/null 2>&1; then
              mkdir -p state
              touch state/.gitkeep
              git add state/.gitkeep
              git commit -m "init(state): track state directory" || true
              git pull --rebase || true
              git push || true
            fi

            # 변경이 있는 경우에만 커밋/푸시
            git add -A state/
            if git diff --cached --quiet -- state/ ; then
              echo "No state changes to commit"
            else
              git commit -m "state(${KEY}): update @ ${GITHUB_RUN_ID}" || true
              git pull --rebase || true
              git push || (sleep 2 && git pull --rebase && git push) || true
            fi

            echo "::endgroup::"
          done < projects.txt